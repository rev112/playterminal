#!/bin/bash
#
# (Almost) idempodent iptables-based firewall.
set -eu

COMMENT="{{ iptables_id_comment }}"
SCRIPT_DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"

add_rule() {
    # Add a rule with the comment
    set -x
    iptables -A "$@" -m comment --comment "$COMMENT"
    { set +x; } 2>/dev/null
}

insert_rule() {
    # Insert a rule with the comment in the beginning of the chain
    set -x
    iptables -I "$@" -m comment --comment "$COMMENT"
    { set +x; } 2>/dev/null
}

policies_accept() {
    iptables -P INPUT   ACCEPT
    iptables -P OUTPUT  ACCEPT
    iptables -P FORWARD ACCEPT
}

policies_drop() {
    iptables -P INPUT   DROP
    iptables -P OUTPUT  DROP
    iptables -P FORWARD DROP
}

add_docker_rules() {
    # Check if docker command and interface exist
    command -v docker &>/dev/null && ifconfig docker0 &>/dev/null
    if [ $? == 0 ]; then
        # Allow to connect to Docker containers from the host
        add_rule OUTPUT -o docker0 -j ACCEPT

{% if docker_enable_icc %}
        # Enable inter-container communication
        insert_rule FORWARD -i docker0 -o docker0 -j ACCEPT
{% else %}
        # Disable inter-container communication
        insert_rule FORWARD -i docker0 -o docker0 -j DROP
{% endif %}

{% if docker_enable_snat %}
        # Enable Source NAT
        add_rule POSTROUTING -t nat -s 172.17.0.0/16 ! -o docker0 -j MASQUERADE
{% endif %}
    fi
}

persist_rules() {
    # Save rules, so they are persisted across reboots
    iptables-save > /etc/iptables/rules.v4
}

disable_firewall() {
    policies_accept
    BACKUP_DIR="iptables_backup"
    mkdir -p "./$BACKUP_DIR"
    # Backup all current rules
    iptables-save > "./$BACKUP_DIR/iptables_rules_$(date +%Y_%m_%d.%H_%M_%S.%3N).txt"
    # Rotate backups (max 30 files)
    ls -tp "./$BACKUP_DIR"/*.txt | grep -v '/$' | tail -n +31 | xargs -r -d '\n' rm --
    # Remove all rules with the comment
    iptables-save | grep -v "$COMMENT" | iptables-restore
    persist_rules
}

enable_firewall() {
    policies_accept
    disable_firewall

    # Common
    add_rule INPUT -i lo -j ACCEPT
    add_rule INPUT -m state --state ESTABLISHED,RELATED -j ACCEPT
    add_rule OUTPUT -o lo -j ACCEPT
    add_rule OUTPUT -m state --state ESTABLISHED,RELATED -j ACCEPT
    add_rule FORWARD -m state --state ESTABLISHED,RELATED -j ACCEPT

{% for proto in iptables_map %}
    {%- if proto not in ['tcp', 'udp'] %}{{ template_abort }}{% endif %}
    # {{ proto|upper }}
{% for direction in iptables_map[proto]|sort %}
    {%- if direction not in ['in', 'out'] %}{{ template_abort }}{% endif %}
{% for port_entry in iptables_map[proto][direction] %}
{% set chains = ['INPUT'] if direction == 'in' else ['OUTPUT', 'FORWARD'] %}
{% set ip_attr = '-s' if direction == 'in' else '-d' %}
{% for chain in chains %}
{% for ip_entry in port_entry.get('restrict', []) %}
    add_rule {{ chain }} -p {{ proto }} --dport {{ port_entry['port'] }} {{ ip_attr }} {{ ip_entry }} -j ACCEPT
{% else %}
    add_rule {{ chain }} -p {{ proto }} --dport {{ port_entry['port'] }} -j ACCEPT
{% endfor %}
{% endfor %}
{% endfor %}
{% endfor %}
{% endfor %}

    # ICMP
{% for chain in ['INPUT', 'OUTPUT', 'FORWARD'] %}
{% for icmp_type in ['echo-request', 'echo-reply'] %}
    add_rule {{ chain }} -p icmp -m icmp --icmp-type {{ icmp_type }} -j ACCEPT
{% endfor %}
{% endfor %}

    # Custom rules
{% for rule in iptables_custom_rules|default([]) %}
    add_rule {{ rule }}
{% else %}
    # none
{% endfor %}

    add_docker_rules
    policies_drop
    persist_rules
}

hash_tables() {
    # Hash the contents of iptables tables. Used for checking if some rules were
    # updated.
    iptables-save | grep -v '^#' | perl -pE 's/\[\d+:\d+\]//g' | md5sum | awk '{ print $1 }'
}

usage() {
    echo "
Usage:
    $0 <command>

    Available commands:
        enable  -- add all rules, set default policies to DROP
        disable -- remove rules, set policies to ACCEPT
"
}

cd $SCRIPT_DIR
START_HASH=$(hash_tables)
if [[ $# -eq 0 ]]; then
    echo "No command specified."
    usage
    exit 1
elif [[ "$1" == "enable" ]]; then
    enable_firewall
elif [[ "$1" == "disable" ]]; then
    disable_firewall
else
    echo 'Invalid command.'
    usage
    exit 1
fi
END_HASH=$(hash_tables)

if [[ "$START_HASH" = "$END_HASH" ]]; then
    echo 'No changes.'
fi
